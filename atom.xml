<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://constgo.com</id>
    <title>小二的CodingLife</title>
    <updated>2020-02-20T08:08:44.436Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://constgo.com"/>
    <link rel="self" href="https://constgo.com/atom.xml"/>
    <subtitle>大家好，我叫不紧张。</subtitle>
    <logo>https://constgo.com/images/avatar.png</logo>
    <icon>https://constgo.com/favicon.ico</icon>
    <rights>All rights reserved 2020, 小二的CodingLife</rights>
    <entry>
        <title type="html"><![CDATA[【复习】位，字节，兆？二进制，十进制，十六进制？机器数，真值，原码，补码，反码？]]></title>
        <id>https://constgo.com/ji-qi-shu-zhen-zhi-yuan-ma-bu-ma-fan-ma-yi-qi-lai-fu-xi-yi-xia/</id>
        <link href="https://constgo.com/ji-qi-shu-zhen-zhi-yuan-ma-bu-ma-fan-ma-yi-qi-lai-fu-xi-yi-xia/">
        </link>
        <updated>2020-02-19T12:22:56.000Z</updated>
        <content type="html"><![CDATA[<p><strong>位，字节，兆</strong></p>
<p>这些都是存储单位。</p>
<p>1.bit（比特） 又叫做 位<br>
bit也就是我们不一定听说过的比特，大名鼎鼎的比特币就是以此命名的。它的简写为小写字母 “b” 。</p>
<p>作为信息技术的最基本存储单元，因为比特实在太小了，所以大家生活中并不是经常听到。那么 bit 是什么呢？</p>
<p>电脑是以二进制存储以及发送接收数据的。二进制的一位，就叫做 1 bit。也就是说 bit 的含义就是二进制数中的一个数位，即 “0” 或者 &quot;1&quot;。是电子计算机中最小的数据单位。每一位的状态只能是0或1。</p>
<p>2.Byte（字节）<br>
Byte 是字节的英文写法。它的简写为大写字母 “B&quot;。</p>
<p>在ASCII码中，一个英文字母（不分大小写）占一个字节的空间，一个中文汉字占两个字节的空间。<br>
符号：英文标点占一个字节，中文标点占两个字节。举例：英文句号“.”占1个字节的大小，中文句号“</p>
<p>字节 Byte 和比特 bit 的换算关系是 1 Byte = 8 bit 。8个二进制位构成1个“字节(Byte)”，它是存储空间的基本计量单位。</p>
<p>3.字（word）<br>
计算机处理事务（寻址、运算等）的单位 通常由若干个字节组成。若干个字节构成，字的位数叫做字长，不同档次的机器有不同的字长。占几位 现代计算机的字长通常为 16、32、64 位（2、4、8个字节）。例如一台8位机，它的1个字就等于1个字节，字长为8位。如果是一台16位机，那么，它的1个字就由2个字节构成，字长为16位。字是计算机进行数据处理和运算的单位。</p>
<ol>
<li>KB （千字节）<br>
需要了解的是，1 KB 并不是一千字节，因为计算机只认识二进制，所以在这里的 KB，是 2 的 10 次方，也就是 1024 个字节。</li>
</ol>
<p>另外很多表示存储单位的地方都把 B 写成 b，造成了大家认知的混乱。其实在存储单位计量中出现 b 的地方，它的意思仍然是 B，不要因为 bit 的缩写是 b 就被误导了，在存储计量中是不会用 比特，千比特 这种单位的。但是在网速计量中，b的真实意思就是指 比特 了，这个我们下面再说。</p>
<p>5.存储单位换算<br>
存储单位换算关系如下：<br>
<img src="https://constgo.com/post-images/1582170125225.png" alt="" loading="lazy"></p>
<p>6.字符是可使用多种不同字符方案或代码页来表示的抽象实体。例如，Unicode UTF-16 编码将字符表示为 16 位整数序列，而 Unicode UTF-8 编码则将相同的字符表示为 8 位字节序列。公共语言运行库使用 Unicode UTF-16（Unicode 转换格式，16 位编码形式）表示字符。</p>
<p>二.网速怎么算？<br>
网络线路的计量单位，也就是我们通常说的 2M 宽带，10 M 宽带的单位，是 比特每秒（bits per second）。比特每秒 的缩写为 bps，意思是每秒接收的平均比特数。更大的单位是 千比特每秒（Kbps）或 兆比特每秒（Mbps）。2M宽带，意味着每秒平均可以接受 2Mb 的数据，也就是二百万左右比特的数据，在这里，小写 b 的意思就是比特了。</p>
<p>而通常我们说的下载速度，也就是网速，是每秒下载的字节数。比如网速是 5 KB（这网速可是够慢的），意思就是每秒接收的数据是 五千字节。</p>
<p>那我们根据 一字节 等于 8 比特的 换算方法，就可以得出以下结论。</p>
<p>下载速度从理论上来说，应该是 带宽的 八分之一。</p>
<p>2M 宽带理论下载速度是 256 KB</p>
<p>10M 宽带理论下载速度是 1280 KB</p>
<p>实际上由于我们还需要接受一些下载需要的一些信息，如 IP 信息，HTTP 信息，再加上服务器传输速度，电脑配置等原因，网速会比理论慢一些。</p>
<p>由于很多人都会混淆 字节的大写 B 和比特的小写 b，造成各种混乱。所以在书写单位缩写时，一定要注意 字节 和 比特 的单位的大小写 。</p>
<p>总结一下，有以下几个要点需要注意：</p>
<p>存储单位和网速的单位，不管是 B 还是 b，代表的都是 字节 Byte。<br>
带宽的单位，不管是 B 还是 b，代表的都是 比特 bit 。<br>
只要记住这两点，就算别人写混淆了，我们也是可以明白单位的具体含义的。</p>
<p><strong>二进制，十进制，十六进制</strong><br>
https://www.cnblogs.com/gaizai/p/4233780.html</p>
<p>在数字后面加上不同的字母来表示不同的进位制。B（Binary)表示二进制，O（Octal）表示八进制，D（Decimal）或不加表示十进制，H（Hexadecimal）表示十六进制。例如：(101011)B=(53)O=(43)D=(2B)H</p>
<p>常用  a进制转十进制 是 对 a进制的每一位 用 a的0 1 2 3 4 次幂 之和</p>
<p>二进制 → 十进制<br>
　　方法：二进制数从低位到高位（即从右往左）计算，第0位的权值是2的0次方，第1位的权值是2的1次方，第2位的权值是2的2次方，依次递增下去，把最后的结果相加的值就是十进制的值了。</p>
<p>例：将二进制的(101011)B转换为十进制的步骤如下：</p>
<ol>
<li>
<p>第0位 1 x 2^0 = 1；</p>
</li>
<li>
<p>第1位 1 x 2^1 = 2；</p>
</li>
<li>
<p>第2位 0 x 2^2 = 0；</p>
</li>
<li>
<p>第3位 1 x 2^3 = 8；</p>
</li>
<li>
<p>第4位 0 x 2^4 = 0；</p>
</li>
<li>
<p>第5位 1 x 2^5 = 32；</p>
</li>
<li>
<p>读数，把结果值相加，1+2+0+8+0+32=43，即(101011)B=(43)D。</p>
</li>
</ol>
<p>八进制 → 十进制<br>
　　方法：八进制数从低位到高位（即从右往左）计算，第0位的权值是8的0次方，第1位的权值是8的1次方，第2位的权值是8的2次方，依次递增下去，把最后的结果相加的值就是十进制的值了。</p>
<p>八进制就是逢8进1，八进制数采用 0～7这八数来表达一个数。</p>
<p>例：将八进制的(53)O转换为十进制的步骤如下：</p>
<ol>
<li>
<p>第0位 3 x 8^0 = 3；</p>
</li>
<li>
<p>第1位 5 x 8^1 = 40；</p>
</li>
<li>
<p>读数，把结果值相加，3+40=43，即(53)O=(43)D。</p>
</li>
</ol>
<p>十六进制 → 十进制<br>
　　方法：十六进制数从低位到高位（即从右往左）计算，第0位的权值是16的0次方，第1位的权值是16的1次方，第2位的权值是16的2次方，依次递增下去，把最后的结果相加的值就是十进制的值了。</p>
<p>十六进制就是逢16进1，十六进制的16个数为0123456789ABCDEF。</p>
<p>例：将十六进制的(2B)H转换为十进制的步骤如下：</p>
<ol>
<li>
<p>第0位 B x 16^0 = 11；</p>
</li>
<li>
<p>第1位 2 x 16^1 = 32；</p>
</li>
<li>
<p>读数，把结果值相加，11+32=43，即(2B)H=(43)D。</p>
</li>
</ol>
<p>十进制 → 二进制<br>
　　方法：除2取余法，即每次将整数部分除以2，余数为该位权上的数，而商继续除以2，余数又为上一个位权上的数，这个步骤一直持续下去，直到商为0为止，最后读数时候，从最后一个余数读起，一直到最前面的一个余数。</p>
<p>例：将十进制的(43)D转换为二进制的步骤如下：</p>
<ol>
<li>
<p>将商43除以2，商21余数为1；</p>
</li>
<li>
<p>将商21除以2，商10余数为1；</p>
</li>
<li>
<p>将商10除以2，商5余数为0；</p>
</li>
<li>
<p>将商5除以2，商2余数为1；</p>
</li>
<li>
<p>将商2除以2，商1余数为0；</p>
</li>
<li>
<p>将商1除以2，商0余数为1；</p>
</li>
<li>
<p>读数，因为最后一位是经过多次除以2才得到的，因此它是最高位，读数字从最后的余数向前读，101011，即(43)D=(101011)B。</p>
</li>
</ol>
<p>wpsC02F.tmp</p>
<p>（Figure4：图解十进制 → 二进制）</p>
<p>十进制 → 八进制<br>
　　方法1：除8取余法，即每次将整数部分除以8，余数为该位权上的数，而商继续除以8，余数又为上一个位权上的数，这个步骤一直持续下去，直到商为0为止，最后读数时候，从最后一个余数起，一直到最前面的一个余数。</p>
<p>例：将十进制的(796)D转换为八进制的步骤如下：</p>
<ol>
<li>
<p>将商796除以8，商99余数为4；</p>
</li>
<li>
<p>将商99除以8，商12余数为3；</p>
</li>
<li>
<p>将商12除以8，商1余数为4；</p>
</li>
<li>
<p>将商1除以8，商0余数为1；</p>
</li>
<li>
<p>读数，因为最后一位是经过多次除以8才得到的，因此它是最高位，读数字从最后的余数向前读，1434，即(796)D=(1434)O。</p>
</li>
</ol>
<p>wpsC030.tmp</p>
<p>（Figure5：图解十进制 → 八进制）</p>
<p>方法2：使用间接法，先将十进制转换成二进制，然后将二进制又转换成八进制；</p>
<p>wpsC031.tmp</p>
<p>（Figure6：图解十进制 → 八进制）</p>
<p>十进制 → 十六进制<br>
　　方法1：除16取余法，即每次将整数部分除以16，余数为该位权上的数，而商继续除以16，余数又为上一个位权上的数，这个步骤一直持续下去，直到商为0为止，最后读数时候，从最后一个余数起，一直到最前面的一个余数。</p>
<p>例：将十进制的(796)D转换为十六进制的步骤如下：</p>
<ol>
<li>
<p>将商796除以16，商49余数为12，对应十六进制的C；</p>
</li>
<li>
<p>将商49除以16，商3余数为1；</p>
</li>
<li>
<p>将商3除以16，商0余数为3；</p>
</li>
<li>
<p>读数，因为最后一位是经过多次除以16才得到的，因此它是最高位，读数字从最后的余数向前读，31C，即(796)D=(31C)H。</p>
</li>
</ol>
<p>wpsC042.tmp</p>
<p>（Figure7：图解十进制 → 十六进制）</p>
<p>方法2：使用间接法，先将十进制转换成二进制，然后将二进制又转换成十六进制；</p>
<p><strong>机器数，真值，原码，补码，反码？</strong><br>
一、机器数和真值</p>
<p>在学习原码，反码和补码之前，需要先了解机器数和真值的概念。</p>
<p>1、机器数</p>
<p>一个数在计算机中的二进制表示形式，叫做这个数的机器数。机器数是带符号的，在计算机用一个数的最高位存放符号，正数为0，负数为1.</p>
<p>比如，十进制中的数 +3 ，计算机字长为8位，转换成二进制就是00000011。如果是 -3 ，就是 10000011 。</p>
<p>那么，这里的 00000011 和 10000011 就是机器数。</p>
<p>2、真值</p>
<p>**机器数的第一位是符号位，后边才是真正的数值，**所以机器数的形式值就不等于真正的数值。例如上面的有符号数10000011，其最高位1代表负，其真正数值是 -3 而不是形式值131（10000011转换成十进制等于131）。所以，为区别起见，将带符号位的机器数对应的真正数值称为机器数的真值。</p>
<p>例：</p>
<p>0000 0001的真值 = +000 0001 = +1</p>
<p>1000 0001的真值 = –000 0001 = –1</p>
<p>二、原码，反码，补码的基础概念和计算方法</p>
<p>在探求为何机器要使用补码之前，让我们先了解原码，反码和补码的概念。对于一个数，计算机要使用一定的编码方式进行存储。 原码，反码，补码是机器存储一个具体数字的编码方式。</p>
<p>1579142033257_原码反码补码.jpg</p>
<ol>
<li>原码</li>
</ol>
<p>原码就是符号位加上真值的绝对值，即用第一位表示符号，其余位表示值。比如如果是8位二进制：</p>
<p>[+1]（原码） = 0000 0001</p>
<p>[-1]（原码） = 1000 0001</p>
<p>第一位是符号位。因为第一位是符号位，所以8位二进制数的取值范围就是：</p>
<p>[1111 1111 , 0111 1111]</p>
<p>即</p>
<p>[-127 , 127]</p>
<p>原码是人脑最容易理解和计算的表示方式。</p>
<ol start="2">
<li>反码</li>
</ol>
<p>反码的表示方法是: 正数的反码是其本身，<strong>负数</strong>的反码是在其原码的基础上，<strong>符号位不变，其余各个位取反。</strong></p>
<p>[+1] = [00000001]（原码）= [00000001]（反码）</p>
<p>[-1] = [10000001]（原码）= [11111110]（反码）</p>
<p>可见如果一个反码表示的是负数，人脑无法直观的看出来它的数值。通常要将其转换成原码再计算。</p>
<ol start="3">
<li>补码</li>
</ol>
<p>补码的表示方法是：正数的补码就是其本身，<strong>负数</strong>的补码是在其原码的基础上，<strong>符号位不变，其余各位取反，最后+1 (即在反码的基础上+1)。</strong></p>
<p>[+1] = [00000001]（原码） = [00000001]（反码） = [00000001]（补码）</p>
<p>[-1] = [10000001]（原码） = [11111110]（反码） = [11111111]（补码）</p>
<p>对于负数，补码表示方式也是人脑无法直观看出其数值的。通常也需要转换成原码在计算其数值。</p>
<p>三、为何要使用原码，反码和补码</p>
<p>在开始深入学习前，我的学习建议是先&quot;死记硬背&quot;上面的原码，反码和补码的表示方式以及计算方法。</p>
<p>现在我们知道了计算机可以有三种编码方式表示一个数。对于正数因为三种编码方式的结果都相同:</p>
<p>[+1] = [00000001]（原码） = [00000001]（反码） = [00000001]（补码）</p>
<p>所以不需要过多解释. 但是对于负数:</p>
<p>[-1] = [10000001]（原码） = [11111110]（反码） = [11111111]（补码）</p>
<p>可见原码, 反码和补码是完全不同的。既然原码才是被人脑直接识别并用于计算表示方式。为何还会有反码和补码呢?</p>
<p>首先, 因为人脑可以知道第一位是符号位，在计算的时候我们会根据符号位, 选择对真值区域的加减 (真值的概念在本文最开头)。但是对于计算机，加减乘数已经是最基础的运算，要设计的尽量简单。计算机辨别&quot;符号位&quot;显然会让计算机的基础电路设计变得十分复杂! 于是人们想出了将符号位也参与运算的方法。我们知道，根据运算法则减去一个正数等于加上一个负数，即: 1-1 = 1 + (-1) = 0 ，所以机器可以只有加法而没有减法，这样计算机运算的设计就更简单了。</p>
<p>于是人们开始探索，将符号位参与运算，并且只保留加法的方法。首先来看原码：</p>
<p>计算十进制的表达式: 1-1=0</p>
<p>1 - 1 = 1 + (-1) = [00000001]原 + [10000001]原 = [10000010]原 = -2</p>
<p>如果用原码表示, 让符号位也参与计算, 显然对于减法来说, 结果是不正确的.这也就是为何计算机内部不使用原码表示一个数。</p>
<p>为了解决原码做减法的问题，出现了反码：</p>
<p>计算十进制的表达式: 1-1=0</p>
<p>1 - 1 = 1 + (-1) = [0000 0001]原 + [1000 0001]原= [0000 0001]反 + [1111 1110]反 = [1111 1111]反 = [1000 0000]原 = -0</p>
<p>发现用反码计算减法，结果的真值部分是正确的。而唯一的问题其实就出现在&quot;0&quot;这个特殊的数值上。虽然人们理解上+0和-0是一样的，但是0带符号是没有任何意义的。而且会有[0000 0000]原和[1000 0000]原两个编码表示0。</p>
<p>于是补码的出现，解决了0的符号以及两个编码的问题:</p>
<p>1-1 = 1 + (-1) = [0000 0001]原 + [1000 0001]原 = [0000 0001]补 + [1111 1111]补 = [0000 0000]补=[0000 0000]原</p>
<p>这样0用[0000 0000]表示, 而以前出现问题的-0则不存在了.而且可以用[1000 0000]表示-128:</p>
<p>(-1) + (-127) = [1000 0001]原 + [1111 1111]原 = [1111 1111]补 + [1000 0001]补 = [1000 0000]补</p>
<p>-1-127的结果应该是-128，在用补码运算的结果中，[1000 0000]补 就是-128。但是注意因为实际上是使用以前的-0的补码来表示-128，所以-128并没有原码和反码表示 (对-128的补码表示[1000 0000]补算出来的原码是[0000 0000]原，这是不正确的)。</p>
<p>使用补码，不仅仅修复了0的符号以及存在两个编码的问题，而且还能够多表示一个最低数. 这就是为什么8位二进制，使用原码或反码表示的范围为[-127, +127]，而使用补码表示的范围为[-128, 127]。推荐了解C++培训课程。</p>
<p>因为机器使用补码，所以对于编程中常用到的32位int类型，可以表示范围是: [-231, 231-1] 因为第一位表示的是符号位.而使用补码表示时又可以多保存一个最小值。</p>
<p>其他解释：<br>
<strong>为何要使用原码、反码和补码</strong><br>
现在我们知道了，计算机可以有三种编码方式表示一个数，对于正数因为三种编码方式的结果都相同，所以不需要过多解释。但是对于负数，其原码、反码和补码是完全不同的。既然原码才是被人脑直接识别并用于计算表示方式，为何还会有反码和补码呢?</p>
<p>首先，希望能用符号位代替减法...<br>
首先，因为人脑可以知道第一位是符号位，在计算的时候我们会根据符号位选择对真值区域的加减。<br>
但是对于计算机，加减乘数是最最最最基础的运算，要设计的尽量简单，计算机辨别&quot;符号位&quot;会让计算机的基础电路设计变得复杂，于是，人们想出了将符号位也参与运算的方法。<br>
我们知道，根据运算法则，减去一个正数等于加上一个负数，即：1-1 = 1 + (-1)，所以机器可以只有加法而没有减法，这样计算机运算的设计就更简单了。</p>
<p>但是，用原码计算时有一些问题...<br>
于是人们就开始探索将符号位参与运算并且只保留加法的方法。<br>
首先来看原码：<br>
1 - 1 = 1 + (-1) = [0000_0001]原 + [1000_0001]原 = [1000_0010]原 = -2</p>
<p>如果用原码表示, 让符号位也参与计算，显然对于减法来说结果是不正确的。<br>
这也就是为何计算机内部不使用原码表示一个数。<br>
PS：<br>
对于上一句话，白哥要打一个大大的问号？虽说包括Java、C在内的很多编程语言，在设计整型时，其定义都是：<br>
【8/16/32/64-bit signed two's complement integer】<br>
即：<br>
【8/16/32/64位有符号二进制补码整数】<br>
但也不能说计算机内部不是采用原码表示的吧？</p>
<p>于是，反码出现了，但还有问题...<br>
为了解决原码做减法的问题，出现了反码：<br>
1 - 1 = 1 + (-1) = [0000_0001]原 + [1000_0001]原= [0000_0001]反 + [1111_1110]反 = [1111_1111]反<br>
= [1000_0000]原 = -0</p>
<p>发现用反码计算减法，结果的真值部分是正确的，而唯一的问题其实就出现在&quot;0&quot;这个特殊的数值上。虽然人们理解上+0和-0是一样的，但是0带符号是没有任何意义的，而且会有[0000_0000]原和[1000_0000]原两个编码表示0。</p>
<p>补码解决了遗留的这个问题..<br>
于是补码出现了，它解决了0的符号以及两个编码的问题：<br>
1-1 = 1 + (-1) = [0000_0001]原 + [1000_0001]原 = [0000_0001]补 + [1111_1111]补 = [0000_0000]补<br>
=[0000_0000]原 = 0</p>
<p>这样0用[0000_0000]表示， 而以前出现问题的-0则不存在了。</p>
<p>并且，还有意外收获..<br>
除此之外，还可以用 [1000_0000]补 表示-128：<br>
(-1) + (-127) = [1000_0001]原 + [1111_1111]原 = [1111_1111]补 + [1000_0001]补 = [1000_0000]补</p>
<p>-1-127的结果应该是-128，在用补码运算的结果中， [1000_0000]补 就代表-128。<br>
注意，-128并没有原码和反码表示。</p>
<p>使用补码不仅仅修复了0的符号以及存在两个编码的问题，而且还能够多表示一个最低数，这就是为什么8位二进制使用原码或反码表示的范围为 [-127, +127]，而使用补码表示的范围为 [-128, 127] 的原因。<br>
因为机器使用补码，所以对于编程中常用到的32位int类型可以表示范围是  [-2^31, 2^31-1] ，因为第一位表示的是符号位，而使用补码表示时又可以多保存一个最小值。</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[向李文亮医生致以敬意]]></title>
        <id>https://constgo.com/xiang-li-wen-liang-yi-sheng-zhi-yi-jing-yi/</id>
        <link href="https://constgo.com/xiang-li-wen-liang-yi-sheng-zhi-yi-jing-yi/">
        </link>
        <updated>2020-02-07T05:45:10.000Z</updated>
        <content type="html"><![CDATA[<p>如果可以，我想对你说声抱歉<br>
我忽略你眼里的忧郁<br>
如果可以 我想给你我的青春<br>
只为陪伴你受伤的灵魂<br>
你曾像繁星闪烁<br>
当你从浩瀚星空坠落<br>
如同从未发生过<br>
这世界不会在意你的微弱<br>
<strong>可我知道从此后<br>
这世界少了一份光亮</strong><br>
多了些许的失落<br>
消逝的星辰那是夜空的过错<br>
如果可以 我愿付出我的所有<br>
只为换取你失去的自由<br>
你曾像繁星闪烁<br>
当你从我的身边坠落<br>
如同从未发生过<br>
这世界不会在意你的脆弱<br>
如此浩瀚的星空<br>
容不下一颗小小星辰<br>
熄灭真实的光亮<br>
我知道你的脆弱是你的坚强<br>
如果不能<br>
让这一切触及心灵<br>
别问这丧钟为谁而鸣</p>
<p>《如果可以》是李健为电影《搜索》创作并演唱的歌曲，电影《搜索》**通过一个社会事事件，折射出各种人群的不同选择，借以呈现出大变革时代下的价值观。**继与陈凯歌导演合作《希夷大理》主题歌之后，此次再度携手，李健也将对现实的尖锐质疑和深刻反思写进歌曲，画面感十足的音乐与电影相得益彰。</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[资源+网站收藏]]></title>
        <id>https://constgo.com/zi-yuan-wang-zhan-shou-cang/</id>
        <link href="https://constgo.com/zi-yuan-wang-zhan-shou-cang/">
        </link>
        <updated>2020-01-12T01:54:30.000Z</updated>
        <content type="html"><![CDATA[<p>IT 书籍下载 https://www.itpanda.net/</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[2020年度计划]]></title>
        <id>https://constgo.com/2020-nian-du-ji-hua/</id>
        <link href="https://constgo.com/2020-nian-du-ji-hua/">
        </link>
        <updated>2020-01-01T12:31:48.000Z</updated>
        <content type="html"><![CDATA[<p>该计划需要在1.15日前完成。</p>
<p>个人：减肥、锻炼、读书、写作<br>
生活：房子、打卡北京城计划、要娃？...<br>
工作：保底、涨薪、冲刺、第二职业、技术学习<br>
理想：？</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[2019-2020PHP面试常见题目]]></title>
        <id>https://constgo.com/2019-2020php-mian-shi-chang-jian-ti-mu/</id>
        <link href="https://constgo.com/2019-2020php-mian-shi-chang-jian-ti-mu/">
        </link>
        <updated>2019-12-30T12:11:58.000Z</updated>
        <content type="html"><![CDATA[<p>1.打开浏览器，访问www.baidu.com 直到页面展示。请详解这中间发生了什么？<br>
2.http协议你了解多少？nginx和fpm是怎么交互的？fpm是怎么运行的？<br>
3.php的垃圾回收是怎么做的？<br>
4.mysql的联合索引是什么？调整sql语句中参数的顺序会影响命中索引吗？一次sql查询可以命中几个索引？<br>
5.慢查询发生解决思路是什么？explain对应的那些字段 都是什么意思？<br>
6.linux常用命令知道哪些？linux中怎么看父进程和子进程？怎么后台执行一个php脚本？为什么可以后台执行？<br>
7.设计模式知道哪些？常见的有哪些？实际应用场景有哪些？（除工厂和单例外 3种以上）<br>
8.知道哪些php框架？简单说明laravel和tp的区别。 请问tp的路由是怎么实现的？<br>
9.依赖注入是什么意思？在框架中哪里有体现？<br>
10.swoole是干嘛的？和fpm模式的php有什么不同？协程是什么东西？<br>
11.领域驱动设计（DDD）听说过吗？可否罗列并解释相关名词？ 核心域，通用语言，实体 值对象<br>
12.微服务是什么？中台是什么？请说出你的理解、<br>
13.你遇到过最复杂或者对你最有挑战的项目是什么？你是怎么解决的？你的成长是什么？<br>
14.如果线上某个接口报500了 你会怎么做？描述你可能的做法。<br>
15.如果开发中遇到了问题，你往往会怎么解决。流程是什么样的。</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[go语言学习：1.安装go]]></title>
        <id>https://constgo.com/goinstall/</id>
        <link href="https://constgo.com/goinstall/">
        </link>
        <updated>2019-11-25T14:44:47.000Z</updated>
        <summary type="html"><![CDATA[<p>学习go语言起步安装</p>
]]></summary>
        <content type="html"><![CDATA[<p>学习go语言起步安装</p>
<!-- more -->
<p>1).uname -a 查看系统</p>
<p>2).wget https://dl.google.com/go/go1.12.6.linux-amd64.tar.gz</p>
<p>3).将下载的源码包解压至 /usr/local目录 （为啥安装到这里呢？参看学习（安装目录））<br>
tar -C /usr/local -xzf go1.12.6.linux-amd64.tar.gz</p>
<p>4）将 /usr/local/go/bin 目录添加至PATH环境变量：<br>
export PATH=$PATH:/usr/local/go/bin</p>
<p>5）设置GOPATH，GOROOT环境变量<br>
GOPATH是工作目录<br>
GOROOT为Go的安装目录，这里为/usr/local/go/</p>
<pre><code>vim /etc/profile
写入
export GOROOT=/usr/local/go/
export GOPATH=/root/godev    #自己建立个目录 即可
保存关闭
source /etc/profile


查看环境变量是否设置成功
echo $GOPATH
应该显示刚才你设置的。
</code></pre>
<p>代码测试：<br>
cd /root/godev<br>
vim testhtlloworld.go</p>
<pre><code>package main

import &quot;fmt&quot;

func main() {
	fmt.Printf(&quot;hello, world\n&quot;)
}
</code></pre>
<p>运行测试：<br>
go run testhtlloworld.go<br>
输出helloworld</p>
<hr>
<p>go build<br>
通过go build加上要编译的Go源文件名，我们即可得到一个可执行文件，默认情况下这个文件的名字为源文件名字去掉.go后缀。<br>
$ go build  hellogo.go<br>
$ ls<br>
hellogo* hellogo.go<br>
当然我们也 可以通过-o选项来指定其他名字：<br>
$ go build -o myfirstgoname hellogo.go<br>
$ ls<br>
myfirstgoname* hellogo.go<br>
如果我们在go-examples目录下直接执行go build命令，后面不带文件名，我们将得到一个与目录名同名的可执行文件：<br>
$ go build<br>
$ ls<br>
go-examples* hellogo.go</p>
<p>go install<br>
与build命令相比，install命令在编译源码后还会将可执行文件或库文件安装到约定的目录下。<br>
go install编译出的可执行文件以其所在目录名(DIR)命名<br>
go install将可执行文件安装到与src同级别的bin目录下，bin目录由go install自动创建<br>
go install将可执行文件依赖的各种package编译后，放在与src同级别的pkg目录下</p>
<p>go run、go build、go install命令解释<br>
go run:go run 编译并直接运行程序，它会产生一个临时文件（但不会生成 .exe 文件），直接在命令行输出程序执行结果，方便用户调试。<br>
go build:go build 用于测试编译包，主要检查是否会有编译错误，如果是一个可执行文件的源码（即是 main 包），就会直接生成一个可执行文件。<br>
go install:go install 的作用有两步：第一步是编译导入的包文件，所有导入的包文件编译完才会编译主程序；第二步是将编译后生成的可执行文件放到 bin 目录下（<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>G</mi><mi>O</mi><mi>P</mi><mi>A</mi><mi>T</mi><mi>H</mi><mi mathvariant="normal">/</mi><mi>b</mi><mi>i</mi><mi>n</mi><mi mathvariant="normal">）</mi><mi mathvariant="normal">，</mi><mi mathvariant="normal">编</mi><mi mathvariant="normal">译</mi><mi mathvariant="normal">后</mi><mi mathvariant="normal">的</mi><mi mathvariant="normal">包</mi><mi mathvariant="normal">文</mi><mi mathvariant="normal">件</mi><mi mathvariant="normal">放</mi><mi mathvariant="normal">到</mi><mi>p</mi><mi>k</mi><mi>g</mi><mi mathvariant="normal">目</mi><mi mathvariant="normal">录</mi><mi mathvariant="normal">下</mi><mi mathvariant="normal">（</mi></mrow><annotation encoding="application/x-tex">GOPATH/bin），编译后的包文件放到 pkg 目录下（</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">G</span><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mord mathdefault" style="margin-right:0.13889em;">P</span><span class="mord mathdefault">A</span><span class="mord mathdefault" style="margin-right:0.13889em;">T</span><span class="mord mathdefault" style="margin-right:0.08125em;">H</span><span class="mord">/</span><span class="mord mathdefault">b</span><span class="mord mathdefault">i</span><span class="mord mathdefault">n</span><span class="mord cjk_fallback">）</span><span class="mord cjk_fallback">，</span><span class="mord cjk_fallback">编</span><span class="mord cjk_fallback">译</span><span class="mord cjk_fallback">后</span><span class="mord cjk_fallback">的</span><span class="mord cjk_fallback">包</span><span class="mord cjk_fallback">文</span><span class="mord cjk_fallback">件</span><span class="mord cjk_fallback">放</span><span class="mord cjk_fallback">到</span><span class="mord mathdefault">p</span><span class="mord mathdefault" style="margin-right:0.03148em;">k</span><span class="mord mathdefault" style="margin-right:0.03588em;">g</span><span class="mord cjk_fallback">目</span><span class="mord cjk_fallback">录</span><span class="mord cjk_fallback">下</span><span class="mord cjk_fallback">（</span></span></span></span>GOPATH/pkg）</p>
<p>go build 把go的源文件编译并且和它所依赖的包打包成可执行文件</p>
<p>go run 也要进行编译，但是不打包。</p>
<p>go run 运行go源文件要比go build 打包正的可执行文件之后再运行要慢一些，所以在生产环境上我们其实是</p>
<p>要求打包成exe。</p>
<p>go build 打包后的包要比go源文件大好多，其实是因为打包依赖了其他的文件<br>
.<br>
参考学习：<br>
安装目录：<br>
/usr/local下一般是你安装软件的目录，这个目录就相当于在windows下的programefiles这个目录<br>
/opt这个目录是一些大型软件的安装目录，或者是一些服务程序的安装目录</p>
<p>/opt<br>
Here’s where optional stuff is put. Trying out the latest Firefox beta? Install it to /opt where you can delete it without affecting other settings. Programs in here usually live inside a single folder whick contains all of their data, libraries, etc.<br>
/opt这里主要存放那些可选的程序。你想尝试最新的firefox测试版吗?那就装到/opt目录下吧，这样，当你尝试完，想删掉firefox的时候，你就可 以直接删除它，而不影响系统其他任何设置。安装到/opt目录下的程序，它所有的数据、库文件等等都是放在同个目录下面。</p>
<p>举个例子：刚才装的测试版firefox，就可以装到/opt/firefox_beta目录下，/opt/firefox_beta目录下面就包含了运 行firefox所需要的所有文件、库、数据等等。要删除firefox的时候，你只需删除/opt/firefox_beta目录即可，非常简单。</p>
<p>/usr/local<br>
This is where most manually installed (ie. outside of your package manager) software goes. It has the same structure as /usr. It is a good idea to leave /usr to your package manager and put any custom scripts and things into /usr/local, since nothing important normally lives in /usr/local.<br>
/usr/local这里主要存放那些手动安装的软件，即 不是通过“包管理”或apt-get安装的软件。<br>
它和/usr目录具有相类似的目录结构。<br>
让软件包管理器来管理/usr目录，而把自定义的脚本(scripts)放到/usr/local目录下面，我想这应该是个不错的主意。</p>
<p>PS:新立得（Synaptic）是Debian和Ubuntu Linux操作系统的包管理工具apt的图形化前端。它结合了图形界面的简单操作和 apt-get 命令行工具的强大功能</p>
<p>什么？看完还是不够深刻？那结合Windows作对比，简单通俗点说：</p>
<p>Linux 的软件安装目录是也是有讲究的，理解这一点，在对系统管理是有益的<br>
/usr：系统级的目录，可以理解为C:/Windows/，/usr/lib理解为C:/Windows/System32。<br>
/usr/local：用户级的程序目录，可以理解为C:/Progrem Files/。用户自己编译的软件默认会安装到这个目录下。<br>
/opt：用户级的程序目录，可以理解为D:/Software，opt有可选的意思，这里可以用于放置第三方大型软件（或游戏），当你不需要时，直接rm -rf掉即可。在硬盘容量不够时，也可将/opt单独挂载到其他磁盘上使用。<br>
源码放哪里？<br>
/usr/src：系统级的源码目录。<br>
/usr/local/src：用户级的源码目录。</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[php程序员mac开发利器]]></title>
        <id>https://constgo.com/devtools/</id>
        <link href="https://constgo.com/devtools/">
        </link>
        <updated>2019-11-24T05:24:47.000Z</updated>
        <summary type="html"><![CDATA[<p>开发中常用的工具以及效率工具</p>
]]></summary>
        <content type="html"><![CDATA[<p>开发中常用的工具以及效率工具</p>
<!-- more -->
<p><strong>gdd编程工具</strong></p>
<p>海外vps<br>
基本操作：登录vps</p>
<pre><code>安装ss服务器端
sudo -i
wget --no-check-certificate -O shadowsocks-all.sh https://raw.githubusercontent.com/teddysun/shadowsocks_install/master/shadowsocks-all.sh
chmod +x shadowsocks-all.sh
./shadowsocks-all.sh 2&gt;&amp;1 | tee shadowsocks-all.log

</code></pre>
<pre><code>**高级操作：**
加速：开启bbr
使用root用户登录，运行以下命令：
wget --no-check-certificate https://github.com/teddysun/across/raw/master/bbr.sh
chmod +x bbr.sh
./bbr.sh
</code></pre>
<p><strong>编辑器和Terminal</strong><br>
终端： iTerm2 + zsh + oh-my-zsh 、 xshell<br>
编辑器：PHPStorm（推荐） 、vscode（常用）、sublime（批量处理常见文本等）</p>
<p><strong>开发辅助</strong><br>
SourceTree，git 辅助，可视化利器<br>
postman 请求模拟<br>
Charles，抓包用，支持 https<br>
Google Chrome  不解释<br>
snipaste mac win多终端支持。放弃使用各社交软件截图吧。<br>
Sequel Pro，MySQL 数据库管理<br>
tableplus 数据库管理 mysql redis等<br>
MongoHub，Mongo 数据库管理<br>
SQLite Professional，SQLite 数据库管理</p>
<p><strong>效率</strong><br>
Alfred + Powerpack，应用启动、粘贴板管理<br>
Thor，一键直达 告别切屏（强烈推荐）<br>
滴答清单 自我任务管理，按需提醒。全平台<br>
utools 生产力工具集<br>
XMind 脑图工具 <br>
幕布 文字编辑 自动生成流程图<br>
notion 模块类笔记工具<br>
typora markdown 代码等<br>
Bear 写作工具 轻便<br>
IINA，视频播放 可倍速</p>
<p><strong>保护视力人人有责</strong><br>
f.lux，护眼调色</p>
]]></content>
    </entry>
</feed>