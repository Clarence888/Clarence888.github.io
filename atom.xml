<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://clarence888.github.io</id>
    <title>小二的CodingLife</title>
    <updated>2019-12-30T12:14:08.169Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://clarence888.github.io"/>
    <link rel="self" href="https://clarence888.github.io/atom.xml"/>
    <subtitle>大家好，我叫不紧张。</subtitle>
    <logo>https://clarence888.github.io/images/avatar.png</logo>
    <icon>https://clarence888.github.io/favicon.ico</icon>
    <rights>All rights reserved 2019, 小二的CodingLife</rights>
    <entry>
        <title type="html"><![CDATA[2019-2020PHP面试常见题目]]></title>
        <id>https://clarence888.github.io/post/2019-2020php-mian-shi-chang-jian-ti-mu</id>
        <link href="https://clarence888.github.io/post/2019-2020php-mian-shi-chang-jian-ti-mu">
        </link>
        <updated>2019-12-30T12:11:58.000Z</updated>
        <content type="html"><![CDATA[<p>1.打开浏览器，访问www.baidu.com 直到页面展示。请详解这中间发生了什么？<br>
2.nginx和fpm是怎么交互的？fpm是怎么运行的？<br>
3.php的垃圾回收是怎么做的？<br>
4.mysql的联合索引是什么？调整sql语句中参数的顺序会影响命中索引吗？一次sql查询可以命中几个索引？<br>
5.慢查询发生解决思路是什么？explain对应的那些字段 都是什么意思？<br>
6.linux常用命令知道哪些？linux中怎么看父进程和子进程？怎么后台执行一个php脚本？为什么可以后台执行？<br>
7.设计模式知道哪些？应用场景有哪些？（除工厂和单例外 3种以上）<br>
8.知道哪些php框架？简单说明laravel和tp的区别。 请问tp的路由是怎么实现的？<br>
9.依赖注入是什么意思？在框架中哪里有体现？<br>
10.swoole是干嘛的？和fpm模式的php有什么不同？协程是什么东西？<br>
11.领域驱动设计（DDD）听说过吗？可否罗列并解释相关名词？ 核心域，通用语言，实体 值对象<br>
12.微服务是什么？中台是什么？请说出你的理解、<br>
13.你遇到过最复杂或者对你最有挑战的项目是什么？你是怎么解决的？你的成长是什么？<br>
14.如果线上某个接口报500了 你会怎么做？描述你可能的做法。<br>
15.如果开发中遇到了问题，你往往会怎么解决。流程是什么样的。</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[go语言学习：1.安装go]]></title>
        <id>https://clarence888.github.io/post/goinstall</id>
        <link href="https://clarence888.github.io/post/goinstall">
        </link>
        <updated>2019-11-25T14:44:47.000Z</updated>
        <summary type="html"><![CDATA[<p>学习go语言起步安装</p>
]]></summary>
        <content type="html"><![CDATA[<p>学习go语言起步安装</p>
<!-- more -->
<p>1).uname -a 查看系统</p>
<p>2).wget https://dl.google.com/go/go1.12.6.linux-amd64.tar.gz</p>
<p>3).将下载的源码包解压至 /usr/local目录 （为啥安装到这里呢？参看学习（安装目录））<br>
tar -C /usr/local -xzf go1.12.6.linux-amd64.tar.gz</p>
<p>4）将 /usr/local/go/bin 目录添加至PATH环境变量：<br>
export PATH=$PATH:/usr/local/go/bin</p>
<p>5）设置GOPATH，GOROOT环境变量<br>
GOPATH是工作目录<br>
GOROOT为Go的安装目录，这里为/usr/local/go/</p>
<pre><code>vim /etc/profile
写入
export GOROOT=/usr/local/go/
export GOPATH=/root/godev    #自己建立个目录 即可
保存关闭
source /etc/profile


查看环境变量是否设置成功
echo $GOPATH
应该显示刚才你设置的。
</code></pre>
<p>代码测试：<br>
cd /root/godev<br>
vim testhtlloworld.go</p>
<pre><code>package main

import &quot;fmt&quot;

func main() {
	fmt.Printf(&quot;hello, world\n&quot;)
}
</code></pre>
<p>运行测试：<br>
go run testhtlloworld.go<br>
输出helloworld</p>
<hr>
<p>go build<br>
通过go build加上要编译的Go源文件名，我们即可得到一个可执行文件，默认情况下这个文件的名字为源文件名字去掉.go后缀。<br>
$ go build  hellogo.go<br>
$ ls<br>
hellogo* hellogo.go<br>
当然我们也 可以通过-o选项来指定其他名字：<br>
$ go build -o myfirstgoname hellogo.go<br>
$ ls<br>
myfirstgoname* hellogo.go<br>
如果我们在go-examples目录下直接执行go build命令，后面不带文件名，我们将得到一个与目录名同名的可执行文件：<br>
$ go build<br>
$ ls<br>
go-examples* hellogo.go</p>
<p>go install<br>
与build命令相比，install命令在编译源码后还会将可执行文件或库文件安装到约定的目录下。<br>
go install编译出的可执行文件以其所在目录名(DIR)命名<br>
go install将可执行文件安装到与src同级别的bin目录下，bin目录由go install自动创建<br>
go install将可执行文件依赖的各种package编译后，放在与src同级别的pkg目录下</p>
<p>go run、go build、go install命令解释<br>
go run:go run 编译并直接运行程序，它会产生一个临时文件（但不会生成 .exe 文件），直接在命令行输出程序执行结果，方便用户调试。<br>
go build:go build 用于测试编译包，主要检查是否会有编译错误，如果是一个可执行文件的源码（即是 main 包），就会直接生成一个可执行文件。<br>
go install:go install 的作用有两步：第一步是编译导入的包文件，所有导入的包文件编译完才会编译主程序；第二步是将编译后生成的可执行文件放到 bin 目录下（<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>G</mi><mi>O</mi><mi>P</mi><mi>A</mi><mi>T</mi><mi>H</mi><mi mathvariant="normal">/</mi><mi>b</mi><mi>i</mi><mi>n</mi><mi mathvariant="normal">）</mi><mi mathvariant="normal">，</mi><mi mathvariant="normal">编</mi><mi mathvariant="normal">译</mi><mi mathvariant="normal">后</mi><mi mathvariant="normal">的</mi><mi mathvariant="normal">包</mi><mi mathvariant="normal">文</mi><mi mathvariant="normal">件</mi><mi mathvariant="normal">放</mi><mi mathvariant="normal">到</mi><mi>p</mi><mi>k</mi><mi>g</mi><mi mathvariant="normal">目</mi><mi mathvariant="normal">录</mi><mi mathvariant="normal">下</mi><mi mathvariant="normal">（</mi></mrow><annotation encoding="application/x-tex">GOPATH/bin），编译后的包文件放到 pkg 目录下（</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">G</span><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mord mathdefault" style="margin-right:0.13889em;">P</span><span class="mord mathdefault">A</span><span class="mord mathdefault" style="margin-right:0.13889em;">T</span><span class="mord mathdefault" style="margin-right:0.08125em;">H</span><span class="mord">/</span><span class="mord mathdefault">b</span><span class="mord mathdefault">i</span><span class="mord mathdefault">n</span><span class="mord cjk_fallback">）</span><span class="mord cjk_fallback">，</span><span class="mord cjk_fallback">编</span><span class="mord cjk_fallback">译</span><span class="mord cjk_fallback">后</span><span class="mord cjk_fallback">的</span><span class="mord cjk_fallback">包</span><span class="mord cjk_fallback">文</span><span class="mord cjk_fallback">件</span><span class="mord cjk_fallback">放</span><span class="mord cjk_fallback">到</span><span class="mord mathdefault">p</span><span class="mord mathdefault" style="margin-right:0.03148em;">k</span><span class="mord mathdefault" style="margin-right:0.03588em;">g</span><span class="mord cjk_fallback">目</span><span class="mord cjk_fallback">录</span><span class="mord cjk_fallback">下</span><span class="mord cjk_fallback">（</span></span></span></span>GOPATH/pkg）</p>
<p>go build 把go的源文件编译并且和它所依赖的包打包成可执行文件</p>
<p>go run 也要进行编译，但是不打包。</p>
<p>go run 运行go源文件要比go build 打包正的可执行文件之后再运行要慢一些，所以在生产环境上我们其实是</p>
<p>要求打包成exe。</p>
<p>go build 打包后的包要比go源文件大好多，其实是因为打包依赖了其他的文件<br>
.<br>
参考学习：<br>
安装目录：<br>
/usr/local下一般是你安装软件的目录，这个目录就相当于在windows下的programefiles这个目录<br>
/opt这个目录是一些大型软件的安装目录，或者是一些服务程序的安装目录</p>
<p>/opt<br>
Here’s where optional stuff is put. Trying out the latest Firefox beta? Install it to /opt where you can delete it without affecting other settings. Programs in here usually live inside a single folder whick contains all of their data, libraries, etc.<br>
/opt这里主要存放那些可选的程序。你想尝试最新的firefox测试版吗?那就装到/opt目录下吧，这样，当你尝试完，想删掉firefox的时候，你就可 以直接删除它，而不影响系统其他任何设置。安装到/opt目录下的程序，它所有的数据、库文件等等都是放在同个目录下面。</p>
<p>举个例子：刚才装的测试版firefox，就可以装到/opt/firefox_beta目录下，/opt/firefox_beta目录下面就包含了运 行firefox所需要的所有文件、库、数据等等。要删除firefox的时候，你只需删除/opt/firefox_beta目录即可，非常简单。</p>
<p>/usr/local<br>
This is where most manually installed (ie. outside of your package manager) software goes. It has the same structure as /usr. It is a good idea to leave /usr to your package manager and put any custom scripts and things into /usr/local, since nothing important normally lives in /usr/local.<br>
/usr/local这里主要存放那些手动安装的软件，即 不是通过“包管理”或apt-get安装的软件。<br>
它和/usr目录具有相类似的目录结构。<br>
让软件包管理器来管理/usr目录，而把自定义的脚本(scripts)放到/usr/local目录下面，我想这应该是个不错的主意。</p>
<p>PS:新立得（Synaptic）是Debian和Ubuntu Linux操作系统的包管理工具apt的图形化前端。它结合了图形界面的简单操作和 apt-get 命令行工具的强大功能</p>
<p>什么？看完还是不够深刻？那结合Windows作对比，简单通俗点说：</p>
<p>Linux 的软件安装目录是也是有讲究的，理解这一点，在对系统管理是有益的<br>
/usr：系统级的目录，可以理解为C:/Windows/，/usr/lib理解为C:/Windows/System32。<br>
/usr/local：用户级的程序目录，可以理解为C:/Progrem Files/。用户自己编译的软件默认会安装到这个目录下。<br>
/opt：用户级的程序目录，可以理解为D:/Software，opt有可选的意思，这里可以用于放置第三方大型软件（或游戏），当你不需要时，直接rm -rf掉即可。在硬盘容量不够时，也可将/opt单独挂载到其他磁盘上使用。<br>
源码放哪里？<br>
/usr/src：系统级的源码目录。<br>
/usr/local/src：用户级的源码目录。</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[php程序员mac开发利器]]></title>
        <id>https://clarence888.github.io/post/devtools</id>
        <link href="https://clarence888.github.io/post/devtools">
        </link>
        <updated>2019-11-24T05:24:47.000Z</updated>
        <summary type="html"><![CDATA[<p>开发中常用的工具以及效率工具</p>
]]></summary>
        <content type="html"><![CDATA[<p>开发中常用的工具以及效率工具</p>
<!-- more -->
<p><strong>gdd编程工具</strong></p>
<p>海外vps<br>
基本操作：登录vps</p>
<pre><code>安装ss服务器端
sudo -i
wget --no-check-certificate -O shadowsocks-all.sh https://raw.githubusercontent.com/teddysun/shadowsocks_install/master/shadowsocks-all.sh
chmod +x shadowsocks-all.sh
./shadowsocks-all.sh 2&gt;&amp;1 | tee shadowsocks-all.log

</code></pre>
<pre><code>**高级操作：**
加速：开启bbr
使用root用户登录，运行以下命令：
wget --no-check-certificate https://github.com/teddysun/across/raw/master/bbr.sh
chmod +x bbr.sh
./bbr.sh
</code></pre>
<p><strong>编辑器和Terminal</strong><br>
终端： iTerm2 + zsh + oh-my-zsh 、 xshell<br>
编辑器：PHPStorm（推荐） 、vscode（常用）、sublime（批量处理常见文本等）</p>
<p><strong>开发辅助</strong><br>
SourceTree，git 辅助，可视化利器<br>
postman 请求模拟<br>
Charles，抓包用，支持 https<br>
Google Chrome  不解释<br>
snipaste mac win多终端支持。放弃使用各社交软件截图吧。<br>
Sequel Pro，MySQL 数据库管理<br>
tableplus 数据库管理 mysql redis等<br>
MongoHub，Mongo 数据库管理<br>
SQLite Professional，SQLite 数据库管理</p>
<p><strong>效率</strong><br>
Alfred + Powerpack，应用启动、粘贴板管理<br>
Thor，一键直达 告别切屏（强烈推荐）<br>
滴答清单 自我任务管理，按需提醒。全平台<br>
utools 生产力工具集<br>
XMind 脑图工具 <br>
幕布 文字编辑 自动生成流程图<br>
notion 模块类笔记工具<br>
typora markdown 代码等<br>
Bear 写作工具 轻便<br>
IINA，视频播放 可倍速</p>
<p><strong>保护视力人人有责</strong><br>
f.lux，护眼调色</p>
]]></content>
    </entry>
</feed>